import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Fun√ß√µes de manipula√ß√£o de usu√°rios
function carregarUsuarios() {
    try {
        if (fs.existsSync('./usuarios.json')) {
            return JSON.parse(fs.readFileSync('./usuarios.json', 'utf8'));
        }
        return {};
    } catch (error) {
        console.error('Erro ao carregar usu√°rios:', error);
        return {};
    }
}

function salvarUsuarios(usuarios) {
    try {
        fs.writeFileSync('./usuarios.json', JSON.stringify(usuarios, null, 2));
    } catch (error) {
        console.error('Erro ao salvar usu√°rios:', error);
    }
}

function gerarCodigo() {
    return Math.floor(100000 + Math.random() * 900000).toString();
}

// Fun√ß√£o auxiliar
async function reagirMensagem(sock, msg, emoji) {
    await sock.sendMessage(msg.key.remoteJid, {
        react: {
            text: emoji,
            key: msg.key
        }
    });
}

// Fun√ß√µes de autentica√ß√£o
async function iniciarAutenticacao(sock, msg, jidJson) {
    try {
        let usuarios = carregarUsuarios();
        let usuario = usuarios[jidJson];
        
        // Se j√° estiver autenticado
        if (usuario.autenticado) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: '‚úÖ Voc√™ j√° est√° autenticado! Pode usar todas as fun√ß√µes sem limita√ß√µes.'
            }, { quoted: msg });
            return;
        }
        
        // Se estiver aguardando c√≥digo
        if (usuario.optouAutenticacao === 'aguardando_codigo') {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üìù Voc√™ j√° tem um c√≥digo pendente! Para confirmar sua autentica√ß√£o, use o c√≥digo: *${usuario.codigo}*\n\nResponda com o c√≥digo para continuar.`
            }, { quoted: msg });
            return;
        }
        
        // Gerar novo c√≥digo
        const codigo = gerarCodigo();
        usuario.codigo = codigo;
        usuario.optouAutenticacao = 'aguardando_codigo';
        salvarUsuarios(usuarios);
        
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `üîë *Autentica√ß√£o Iniciada!*\n\nSeu c√≥digo √©: *${codigo}*\n\nResponda com este c√≥digo para confirmar sua autentica√ß√£o e desbloquear o uso ilimitado do bot.`
        }, { quoted: msg });
        
    } catch (error) {
        console.error('Erro ao iniciar autentica√ß√£o:', error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: 'Erro ao iniciar autentica√ß√£o. Tente novamente.'
        }, { quoted: msg });
    }
}

async function verificarCodigo(sock, msg, jidJson, codigoInformado) {
    try {
        let usuarios = carregarUsuarios();
        let usuario = usuarios[jidJson];
        
        // Se n√£o estiver aguardando c√≥digo
        if (usuario.optouAutenticacao !== 'aguardando_codigo') {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: 'Voc√™ n√£o solicitou autentica√ß√£o. Use !auth para iniciar o processo.'
            }, { quoted: msg });
            return;
        }
        
        // Verificar c√≥digo
        if (usuario.codigo === codigoInformado) {
            usuario.autenticado = true;
            usuario.optouAutenticacao = 'autenticado';
            usuario.codigo = null;
            salvarUsuarios(usuarios);
            
            await sock.sendMessage(msg.key.remoteJid, { 
                text: '‚úÖ *Autentica√ß√£o Bem-Sucedida!*\n\nVoc√™ agora tem acesso ilimitado a todas as fun√ß√µes do bot! Aproveite! üéâ'
            }, { quoted: msg });
            await reagirMensagem(sock, msg, '‚úÖ');
            
        } else {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: '‚ùå C√≥digo incorreto! Tente novamente ou use !auth para gerar um novo c√≥digo.'
            }, { quoted: msg });
            await reagirMensagem(sock, msg, '‚ùå');
        }
        
    } catch (error) {
        console.error('Erro ao verificar c√≥digo:', error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: 'Erro ao verificar c√≥digo. Tente novamente.'
        }, { quoted: msg });
    }
}

async function recuperarCodigo(sock, msg, jidJson) {
    try {
        let usuarios = carregarUsuarios();
        let usuario = usuarios[jidJson];
        
        // Se j√° estiver autenticado
        if (usuario.autenticado) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: '‚úÖ Voc√™ j√° est√° autenticado! N√£o precisa de um c√≥digo.'
            }, { quoted: msg });
            return;
        }
        
        // Gerar novo c√≥digo independente do estado atual
        const codigo = gerarCodigo();
        usuario.codigo = codigo;
        usuario.optouAutenticacao = 'aguardando_codigo';
        salvarUsuarios(usuarios);
        
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `üîë *Novo C√≥digo Gerado!*\n\nSeu c√≥digo √©: *${codigo}*\n\nResponda com este c√≥digo para confirmar sua autentica√ß√£o.`
        }, { quoted: msg });
        
    } catch (error) {
        console.error('Erro ao recuperar c√≥digo:', error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: 'Erro ao gerar novo c√≥digo. Tente novamente.'
        }, { quoted: msg });
    }
}

export {
    carregarUsuarios,
    salvarUsuarios,
    iniciarAutenticacao,
    verificarCodigo,
    recuperarCodigo
};
